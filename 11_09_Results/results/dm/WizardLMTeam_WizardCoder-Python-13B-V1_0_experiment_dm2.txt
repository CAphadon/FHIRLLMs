import xml.etree.ElementTree as ET
import json

def parse_xml(input_file): 
    """
    Parse the XML input file to a Python object
    :param input_file: path to the XML input file
    :return: root of the parsed XML tree
    """
    try:
        tree = ET.parse(input_file)
        return tree.getroot()
    except Exception as e:
        print("Error while parsing the XML file")
        print(e)
        return None

def create_fhir_patient(input_data):
    """
    Create a FHIR Patient object from the input data
    :param input_data: parsed input XML
    :return: FHIR Patient object
    """
    # create a FHIR Patient object from the input data
    fhir_patient = {
        "resourceType": "Bundle",
        "type": "transaction",
        "entry": [
            {
                "fullUrl": "Patient/{}".format(input_data.find("./ns0:Absender/ns0:Absender_ID").text),
                "resource": {
                    "resourceType": "Patient",
                    "id": input_data.find("./ns0:Absender/ns0:Absender_ID").text,
                    "meta": {
                        "source": input_data.find("./ns0:Absender/ns0:Software_ID").text,
                        "profile": ["https://www.medizininformatik-initiative.de/fhir/core/modul-person/StructureDefinition/PatientPseudonymisiert"]
                    },
                    "identifier": [
                        {
                            "type": {
                                "coding": [
                                    {
                                        "system": "http://terminology.hl7.org/CodeSystem/v3-ObservationValue",
                                        "code": "PSEUDED"
                                    },
                                    {
                                        "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
                                        "code": "MR",
                                        "display": "Medical-record-number"
                                    }
                                ],
                                "system": "https://fhir.diz.uk-erlangen.de/identifiers/patient-id",
                                "value": input_data.find("./ns0:Menge_Patient/ns0:Patient/ns0:Patienten_Stammdaten/ns0:KrankenversichertenNr").text
                            }
                        }
                    ],
                    "gender": input_data.find("./ns0:Menge_Patient/ns0:Patient/ns0:Patienten_Stammdaten/ns0:Patienten_Geschlecht").text,
                    "birthDate": input_data.find("./ns0:Menge_Patient/ns0:Patient/ns0:Patienten_Stammdaten/ns0:Patienten_Geburtsdatum").text,
                    "address": [
                        {
                            "type": "both",
                            "postalCode": input_data.find("./ns0:Menge_Patient/ns0:Patient/ns0:Menge_Adresse/ns0:Adresse/ns0:Patienten_PLZ").text,
                            "country": input_data.find("./ns0:Menge_Patient/ns0:Patient/ns0:Menge_Adresse/ns0:Adresse/ns0:Patienten_Land").text
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "url": "Patient/{}".format(input_data.find("./ns0:Absender/ns0:Absender_ID").text)
                    }
                }
            }
        ]
    }
    return fhir_patient

def write_json(output_file, fhir_json):
    """
    Write the FHIR Patient object to a JSON file
    :param output_file: path to the output file
    :param fhir_json: FHIR Patient object
    """
    with open(output_file, "w") as f:
        json.dump(fhir_json, f, indent=4)

if __name__ == "__main__":
    # parse the xml input file
    input_tree = parse_xml("input.xml")
    if input_tree is not None:
        # create the FHIR object
        fhir_json = create_fhir_patient(input_tree)
        # write the FHIR object to a JSON file
        write_json("output.json", fhir_json)
        print("Successfully created FHIR Patient object")
