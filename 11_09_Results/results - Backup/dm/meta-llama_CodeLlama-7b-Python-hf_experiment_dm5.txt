You are tasked with turning this input json file 
<ns0:ADT_GEKID xmlns:ns0="http://www.gekid.de/namespace" Schema_Version="2.2.1">
	<ns0:Absender Absender_ID="22222244" Software_ID="ONKOSTAR" Installations_ID="2.9.8">
		<ns0:Absender_Bezeichnung>UKER</ns0:Absender_Bezeichnung>
		<ns0:Absender_Ansprechpartner />
		<ns0:Absender_Anschrift>Maximiliansplatz 2, 91054 Erlangen</ns0:Absender_Anschrift>
	</ns0:Absender>
	<ns0:Menge_Patient>
		<ns0:Patient>
            <ns0:Patienten_Stammdaten Patient_ID="123456789">
                <ns0:KrankenversichertenNr>Q123456</ns0:KrankenversichertenNr>
                <ns0:KrankenkassenNr>555555</ns0:KrankenkassenNr>
                <ns0:Patienten_Nachname>Max</ns0:Patienten_Nachname>
                <ns0:Patienten_Vornamen>Mustermann</ns0:Patienten_Vornamen>
                <ns0:Patienten_Geschlecht>M</ns0:Patienten_Geschlecht>
                <ns0:Patienten_Geburtsdatum>02.04.2023</ns0:Patienten_Geburtsdatum>
                <ns0:Menge_Adresse>
                    <ns0:Adresse>
                        <ns0:Patienten_Strasse>Bahnhofstr. 1</ns0:Patienten_Strasse>
                        <ns0:Patienten_Land>DE</ns0:Patienten_Land>
                        <ns0:Patienten_PLZ>70070</ns0:Patienten_PLZ>
                        <ns0:Patienten_Ort>Tuebingen</ns0:Patienten_Ort>
                    </ns0:Adresse>
                </ns0:Menge_Adresse>
            </ns0:Patienten_Stammdaten>
			<ns0:Menge_Meldung>
				<ns0:Meldung Meldung_ID="ST0001238" Melder_ID="ST">
					<ns0:Meldedatum>10.11.2021</ns0:Meldedatum>
					<ns0:Meldebegruendung>I</ns0:Meldebegruendung>
					<ns0:Meldeanlass>behandlungsende</ns0:Meldeanlass>
					<ns0:Tumorzuordnung Tumor_ID="1">
                        <ns0:Primaertumor_ICD_Code>C72.0</ns0:Primaertumor_ICD_Code>
                        <ns0:Primaertumor_ICD_Version>10 2021 GM</ns0:Primaertumor_ICD_Version>
                        <ns0:Diagnosedatum>18.05.2021</ns0:Diagnosedatum>
                        <ns0:Seitenlokalisation>R</ns0:Seitenlokalisation>
                    </ns0:Tumorzuordnung>
					<ns0:Menge_ST>
						<ns0:ST ST_ID="45900">
							<ns0:ST_Intention>P</ns0:ST_Intention>
							<ns0:ST_Stellung_OP>N</ns0:ST_Stellung_OP>
							<ns0:Menge_Bestrahlung>
								<ns0:Bestrahlung>
									<ns0:ST_Zielgebiet>5.4.-</ns0:ST_Zielgebiet>
									<ns0:ST_Seite_Zielgebiet>T</ns0:ST_Seite_Zielgebiet>
								</ns0:Bestrahlung>
								<ns0:Bestrahlung>
									<ns0:ST_Zielgebiet>1.2</ns0:ST_Zielgebiet>
									<ns0:ST_Seite_Zielgebiet>R</ns0:ST_Seite_Zielgebiet>
									<ns0:ST_Ende_Datum>02.12.2021</ns0:ST_Ende_Datum>
								</ns0:Bestrahlung>
							</ns0:Menge_Bestrahlung>
							<ns0:ST_Ende_Grund>L</ns0:ST_Ende_Grund>
							<ns0:Menge_Nebenwirkung>
								<ns0:ST_Nebenwirkung>
									<ns0:Nebenwirkung_Grad>4</ns0:Nebenwirkung_Grad>
								</ns0:ST_Nebenwirkung>
							</ns0:Menge_Nebenwirkung>
						</ns0:ST>
					</ns0:Menge_ST>
				</ns0:Meldung>
			</ns0:Menge_Meldung>
		</ns0:Patient>
	</ns0:Menge_Patient>
	<ns0:Menge_Melder>
		<ns0:Melder Melder_ID="ST">
			<ns0:Meldende_Stelle>ST</ns0:Meldende_Stelle>
		</ns0:Melder>
	</ns0:Menge_Melder>
</ns0:ADT_GEKID> into a valid FHIR json. The according FHIR json should be of resourceType 'Bundle' with type 'transaction' and a 'Patient' as its entry. The FHIR json to this input looks like this:
{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "resource": {
        "resourceType": "Patient",
        "gender": "male",
        "extension": [
          {
            "url": "http://hl7.org/fhir/StructureDefinition/patient-mrn",
            "valueString": "123456789"
          }
        ],
        "identifier": [
          {
            "type": {
              "coding": [
                {
                  "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
                  "code": "MR",
                  "display": "Medical Record Number"
                }
              ]
            },
            "value": "Q123456"
          }
        ],
        "name": [
          {
            "family": "Mustermann",
            "given": [
              "Max"
            ]
          }
        ],
        "birthDate": "2023-04-02",
        "address": [
          {
            "line": [
              "Bahnhofstr. 1"
            ],
            "country": "DE",
            "postalCode": "70070",
            "city": "Tuebingen"
          }
        ]
      }
    }
  ]
}

For this purpose we provide the following classes:

class GekidPatient:
    def __init__(self,
                 pid,
                 kk,
                 pname,
                 gender,
                 dob,
                 address,
                 mrn,
                 kk_id,
                 icd_code,
                 icd_version,
                 diagnosed_at,
                 side,
                 start_of_treatment,
                 end_of_treatment,
                 reason_of_end_of_treatment,
                 grade,
                 icd_code_2,
                 icd_version_2,
                 diagnosed_at_2,
                 side_2,
                 start_of_treatment_2,
                 end_of_treatment_2,
                 reason_of_end_of_treatment_2,
                 grade_2):
        self.pid = pid
        self.kk = kk
        self.pname = pname
        self.gender = gender
        self.dob = dob
        self.address = address
        self.mrn = mrn
        self.kk_id = kk_id
        self.icd_code = icd_code
        self.icd_version = icd_version
        self.diagnosed_at = diagnosed_at
        self.side = side
        self.start_of_treatment = start_of_treatment
        self.end_of_treatment = end_of_treatment
        self.reason_of_end_of_treatment = reason_of_end_of_treatment
        self.grade = grade
        self.icd_code_2 = icd_code_2
        self.icd_version_2 = icd_version_2
        self.diagnosed_at_2 = diagnosed_at_2
        self.side_2 = side_2
        self.start_of_treatment_2 = start_of_treatment_2
        self.end_of_treatment_2 = end_of_treatment_2
        self.reason_of_end_of_treatment_2 = reason_of_end_of_treatment_2
        self.grade_2 = grade_2


class GekidMelder:
    def __init__(self,
                 melder_id,
                 meldende_stelle):
        self.melder_id = melder_id
        self.meldende_stelle = meldende_stelle


class GekidMeldung:
    def __init__(self,
                 pid,
                 melder_id,
                 meldeanlass,
                 meldegrund,
                 meldebezu,
                 meldebegruendung,
                 st,
                 st_id,
                 st_intention):
        self.pid = pid
        self.melder_id = melder_id
        self.meldeanlass = meldeanlass
        self.meldegrund = meldegrund
        self.meldebezu = meldebezu
        self.meldebegruendung = meldebegruendung
        self.st = st
        self.st_id = st_id
        self.st_intention = st_intention


class GekidST:
    def __init__(self,
                 pid,
                 melder_id,
                 st_intention,
                 st_stellung_op,
                 bs,
                 bs_zielgebiet,
                 bs_seite_zielgebiet,
                 bs_ende_datum,
                 nw,
                 nw_grad,
                 st_ende_grund):
        self.pid = pid
        self.melder_id = melder_id
        self.st_intention = st_intention
        self.st_stellung_op = st_stellung_op
        self.bs = bs
        self.bs_zielgebiet = bs_zielgebiet
        self.bs_seite_zielgebiet = bs_seite_zielgebiet
        self.bs_ende_datum = bs_ende_datum
        self.nw = nw
        self.nw_grad = nw_grad
        self.st_ende_grund = st_ende_grund


class GekidMelder:
    def __init__(self,
                 melder_id,
                 meldende_stelle):
        self.melder_id = melder_id
        self.meldende_stelle = meldende_stelle


class GekidMeldung:
    def __init__(self,
                 pid,
                 melder_id,
                 meldeanlass,
                 meldegrund,
                 meldebezu,
                 meldebegruendung,
                 st,
                 st_id,
                 st_intention):
        self.pid = pid
        self.melder_id = melder_id
        self.meldeanlass = meldeanlass
        self.meldegrund = meldegrund
        self.meldebezu = meldebezu
        self.meldebegruendung = meldebegruendung
        self.st = st
        self.st_id = st_id
        self.st_intention = st_intention


class GekidST:
    def __init__(self,
                 pid,
                 melder_id,
                 st_intention,
                 st_stellung_op,
                 bs,
                 bs_zielgebiet,
                 bs_seite_zielgebiet,
                 bs_ende_datum,
                 nw,
                 nw_grad,
                 st_ende_grund):
        self.pid = pid
        self.melder_id = melder_id
        self.st_intention = st_intention
        self.st_stellung_op = st_stellung_op
        self.bs = bs
        self.bs_zielgebiet = bs_zielgebiet
        self.bs_seite_zielgebiet = bs_seite_zielgebiet
        self.bs_ende_datum = bs_ende_datum
        self.nw = nw
        self.nw_grad = nw_grad
        self.st_ende_grund = st_ende_grund


class GekidBestrahlung:
    def __init__(self,
                 bs,
                 bs_zielgebiet,
                 bs_seite_zielgebiet,
                 bs_ende_datum):
        self.bs = bs
        self.bs_zielgebiet = bs_zielgebiet
        self.bs_seite_zielgebiet = bs_seite_zielgebiet
        self.bs_ende_datum = bs_ende_datum


class GekidNebenwirkung:
    def __init__(self,
                 nw_grad):
        self.nw_grad = nw_grad


class GekidTumorzuordnung:
    def __init__(self,
                 pid,
                 kk,
                 kk_id,
                 icd_code,
                 icd_version,
                 diagnosed_at,
                 side,
                 st,
                 st_id,
                 st_intention,
                 st_stellung_op,
                 bs,
                 bs_zielgebiet,
                 bs_seite_zielgebiet,
                 bs_ende_datum,
                 nw,
                 nw_grad,
                 st_ende_grund):
        self.pid = pid
        self.kk = kk
        self.kk_id = kk_id
        self.icd_code = icd_code
        self.icd_version = icd_version
        self.diagnosed_at = diagnosed_at
        self.side = side
        self.st = st
        self.st_id = st_id
        self.st_intention = st_intention
        self.st_stellung_op = st_stellung_op
        self.bs = bs
        self.bs_zielgebiet = bs_zielgebiet
        self.bs_seite_zielgebiet = bs_seite_zielgebiet
        self.bs_ende_datum = bs_ende_datum
        self.nw = nw
        self.nw_grad = nw_grad
        self.st_ende_grund = st_ende_grund


class GekidPatient:
    pid = ""
    kk = ""
    pname = ""
    gender = ""
    dob = ""
    address = []
    mrn = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    start_of_treatment = ""
    end_of_treatment = ""
    reason_of_end_of_treatment = ""
    grade = ""
    icd_code_2 = ""
    icd_version_2 = ""
    diagnosed_at_2 = ""
    side_2 = ""
    start_of_treatment_2 = ""
    end_of_treatment_2 = ""
    reason_of_end_of_treatment_2 = ""
    grade_2 = ""


class GekidMelder:
    melder_id = ""
    meldende_stelle = ""


class GekidMeldung:
    pid = ""
    melder_id = ""
    meldeanlass = ""
    meldegrund = ""
    meldebezu = ""
    meldebegruendung = ""
    st = ""
    st_id = ""
    st_intention = ""


class GekidST:
    pid = ""
    melder_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


class GekidBestrahlung:
    bs = ""
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""


class GekidNebenwirkung:
    nw_grad = ""


class GekidTumorzuordnung:
    pid = ""
    kk = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    st = []
    st_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


class GekidPatient:
    pid = ""
    kk = ""
    pname = ""
    gender = ""
    dob = ""
    address = []
    mrn = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    start_of_treatment = ""
    end_of_treatment = ""
    reason_of_end_of_treatment = ""
    grade = ""
    icd_code_2 = ""
    icd_version_2 = ""
    diagnosed_at_2 = ""
    side_2 = ""
    start_of_treatment_2 = ""
    end_of_treatment_2 = ""
    reason_of_end_of_treatment_2 = ""
    grade_2 = ""


class GekidMelder:
    melder_id = ""
    meldende_stelle = ""


class GekidMeldung:
    pid = ""
    melder_id = ""
    meldeanlass = ""
    meldegrund = ""
    meldebezu = ""
    meldebegruendung = ""
    st = ""
    st_id = ""
    st_intention = ""


class GekidST:
    pid = ""
    melder_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


class GekidBestrahlung:
    bs = ""
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""


class GekidNebenwirkung:
    nw_grad = ""


class GekidTumorzuordnung:
    pid = ""
    kk = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    st = []
    st_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


class GekidPatient:
    pid = ""
    kk = ""
    pname = ""
    gender = ""
    dob = ""
    address = []
    mrn = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    start_of_treatment = ""
    end_of_treatment = ""
    reason_of_end_of_treatment = ""
    grade = ""
    icd_code_2 = ""
    icd_version_2 = ""
    diagnosed_at_2 = ""
    side_2 = ""
    start_of_treatment_2 = ""
    end_of_treatment_2 = ""
    reason_of_end_of_treatment_2 = ""
    grade_2 = ""


class GekidMelder:
    melder_id = ""
    meldende_stelle = ""


class GekidMeldung:
    pid = ""
    melder_id = ""
    meldeanlass = ""
    meldegrund = ""
    meldebezu = ""
    meldebegruendung = ""
    st = ""
    st_id = ""
    st_intention = ""


class GekidST:
    pid = ""
    melder_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


class GekidBestrahlung:
    bs = ""
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""


class GekidNebenwirkung:
    nw_grad = ""


class GekidTumorzuordnung:
    pid = ""
    kk = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    st = []
    st_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


class GekidPatient:
    pid = ""
    kk = ""
    pname = ""
    gender = ""
    dob = ""
    address = []
    mrn = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    start_of_treatment = ""
    end_of_treatment = ""
    reason_of_end_of_treatment = ""
    grade = ""
    icd_code_2 = ""
    icd_version_2 = ""
    diagnosed_at_2 = ""
    side_2 = ""
    start_of_treatment_2 = ""
    end_of_treatment_2 = ""
    reason_of_end_of_treatment_2 = ""
    grade_2 = ""


class GekidMelder:
    melder_id = ""
    meldende_stelle = ""


class GekidMeldung:
    pid = ""
    melder_id = ""
    meldeanlass = ""
    meldegrund = ""
    meldebezu = ""
    meldebegruendung = ""
    st = ""
    st_id = ""
    st_intention = ""


class GekidST:
    pid = ""
    melder_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


class GekidBestrahlung:
    bs = ""
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""


class GekidNebenwirkung:
    nw_grad = ""


class GekidTumorzuordnung:
    pid = ""
    kk = ""
    kk_id = ""
    icd_code = ""
    icd_version = ""
    diagnosed_at = ""
    side = ""
    st = []
    st_id = ""
    st_intention = ""
    st_stellung_op = ""
    bs = []
    bs_zielgebiet = ""
    bs_seite_zielgebiet = ""
    bs_ende_datum = ""
    nw = []
    nw_grad = ""
    st_ende_grund = ""


def parse_file(file_path: str) -> GekidPatient:
    with open(file_path, "r") as in_file:
        xml_doc = xmltodict.parse(in_file.read())
    return process_gekid_file(xml_doc)


def process_gekid_file(xml_doc: dict) -> GekidPatient:
    # print(json.dumps(xml_doc, indent=2))
    return process_gekid_document(xml_doc["ns0:ADT_GEKID"])


def process_gekid_document(xml_doc: dict) -> GekidPatient:
    # print(json.dumps(xml_doc, indent=2))
    absender = xml_doc["ns0:Absender"]
    melder = xml_doc["ns0:Menge_Melder"]["ns0:Melder"]
    meldeanlass = xml_doc["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Meldeanlass"]
    meldegrund = xml_doc["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Meldegrund"]

    pid = absender["ns0:Patienten_Stammdaten"]["ns0:KrankenversichertenNr"]
    kk = absender["ns0:Patienten_Stammdaten"]["ns0:KrankenkassenNr"]
    pname = absender["ns0:Patienten_Stammdaten"]["ns0:Patienten_Nachname"]
    gender = absender["ns0:Patienten_Stammdaten"]["ns0:Patienten_Geschlecht"]
    dob = absender["ns0:Patienten_Stammdaten"]["ns0:Patienten_Geburtsdatum"]
    address = absender["ns0:Patienten_Stammdaten"]["ns0:Menge_Adresse"]["ns0:Adresse"]["ns0:Patienten_Strasse"]
    mrn = absender["ns0:Patienten_Stammdaten"]["ns0:KrankenversichertenNr"]
    kk_id = absender["ns0:Patienten_Stammdaten"]["ns0:KrankenkassenNr"]
    icd_code = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Primaertumor_ICD_Code"]
    icd_version = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Primaertumor_ICD_Version"]
    diagnosed_at = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Diagnosedatum"]
    side = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Seitenlokalisation"]
    start_of_treatment = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Start_of_Treatment"]
    end_of_treatment = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Ende_Treatment"]
    reason_of_end_of_treatment = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Ende_Grund"]
    grade = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Grade"]
    icd_code_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Kontrolltumor_ICD_Code"]
    icd_version_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Kontrolltumor_ICD_Version"]
    diagnosed_at_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Kontrolltumor_Diagnosedatum"]
    side_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Tumorzuordnung"]["ns0:Tumorzuordnung"]["ns0:Kontrolltumor_Seite"]
    start_of_treatment_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Start_of_Treatment_2"]
    end_of_treatment_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Ende_Treatment_2"]
    reason_of_end_of_treatment_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Ende_Grund_2"]
    grade_2 = xml_doc["ns0:Menge_Patient"]["ns0:Patient"]["ns0:Menge_Meldung"]["ns0:Meldung"]["ns0:Menge_ST"]["ns0:ST"]["ns0:Grade_2"]

    return GekidPatient(
        pid,
        kk,
        pname,
        gender,
        dob,
        address,
        mrn,
        kk_id,
        icd_code,
        icd_version,
        diagnosed_at,
        side,
        start_of_treatment,
        end_of_treatment,
        reason_of_end_of_treatment,
        grade,
        icd_code_2,
        icd_version_2,
        diagnosed_at_2,
        side_2,
        start_of_treatment_2,
        end_of_treatment_2,
        reason_of_end_of_treatment_2,
        grade_2
    )


def process_xml_to_fhir_json(xml_doc: dict) -> str:
    patient = GekidPatient(
        xml_doc["pid"],
        xml_doc["kk"],
        xml_doc["pname"],
        xml_doc["gender"],
        xml_doc["dob"],
        xml_doc["address"],
        xml_doc["mrn"],
        xml_doc["kk_id"],
        xml_doc["icd_code"],
        xml_doc["icd_version"],
        xml_doc["diagnosed_at"],
        xml_doc["side"],
        xml_doc["start_of_treatment"],
        xml_doc["end_of_treatment"],
        xml_doc["reason_of_end_of_treatment"],
        xml_doc["grade"],
        xml_doc["icd_code_2"],
        xml_doc["icd_version_2"],
        xml_doc["diagnosed_at_2"],
        xml_doc["side_2"],
        xml_doc["start_of_treatment_2"],
        xml_doc["end_of_treatment_2"],
        xml_doc["reason_of_end_of_treatment_2"],
        xml_doc["grade_2"]
    )
    melder = GekidMelder(
        xml_doc["melder_id"],
        xml_doc["meldende_stelle"]
    )
    meldeanlass = xml_doc["meldeanlass"]
    meldegrund = xml_doc["meldegrund"]
    meldebezu = xml_doc["meldebezu"]
    meldebegruendung = xml_doc["meldebegruendung"]
    st = xml_doc["st"]
    st_id = xml_doc["st_id"]
    st_intention = xml_doc["st_intention"]
    st_stellung_op = xml_doc["st_stellung_op"]
    bs = xml_doc["bs"]
    bs_zielgebiet = xml_doc["bs_zielgebiet"]
    bs_seite_zielgebiet = xml_doc["bs_seite_zielgebiet"]
    bs_ende_datum = xml_doc["bs_ende_datum"]
    nw = xml_doc["nw"]
    nw_grad = xml_doc["nw_grad"]
    st_ende_grund = xml_doc["st_ende_grund"]

    return process_patient_melder_meldung_st_bs_nw(patient, melder, meldeanlass, meldegrund, meldebezu, meldebegruendung, st, st_id, st_intention, st_stellung_op, bs, bs_zielgebiet, bs_seite_zielgebiet, bs_ende_datum, nw, nw_grad, st_ende_grund)


def process_patient_melder_meldung_st_bs_nw(patient: GekidPatient,
                                            melder: GekidMelder,
                                            meldeanlass: GekidMeldung,
                                            meldegrund: GekidMeldung,
                                            meldebezu: GekidMeldung,
                                            meldebegruendung: GekidMeldung,
                                            st: GekidST,
                                            st_id: GekidST,
                                            st_intention: GekidST,
                                            st_stellung_op: GekidST,
                                            bs: GekidBestrahlung,
                                            bs_zielgebiet: GekidBestrahlung,
                                            bs_seite_zielgebiet: GekidBestrahlung,
                                            bs_ende_datum: GekidBestrahlung,
                                            nw: GekidNebenwirkung,
                                            nw_grad: GekidNebenwirkung,
                                            st_ende_grund: GekidST) -> str:
    bundle = {
        "resourceType": "Bundle",
        "type": "transaction",
        "entry": [
            {
                "resource": {
                    "resourceType": "Patient",
                    "gender": patient.gender,
                    "extension": [
                        {
                            "url": "http://hl7.org/fhir/StructureDefinition/patient-mrn",
                            "valueString": patient.mrn
                        }
                    ],
                    "identifier": [
                        {
                            "type": {
                                "coding": [
                                    {
                                        "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
                                        "code": "MR",
                                        "display": "Medical Record Number"
                                    }
                                ]
                            },
                            "value": patient.mrn
                        },
                        {
                            "type": {
                                "coding": [
                                    {
                                        "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
                                        "code": "KK",
                                        "display": "Krankenkassennummer"
                                    }
                                ]
                            },
                            "value": patient.kk
                        }
                    ],
                    "name": [
                        {
                            "text": patient.pname
                        }
                    ],
                    "birthDate": patient.dob,
                    "address": [
                        {
                            "line": [
                                patient.address
                            ],
                            "country": "DE",
                            "postalCode": patient.address,
                            "city": "Tuebingen"
                        }
                    ]
                }
            }
        ]
    }
    return json.dumps(bundle, indent=2)


if __name__ == '__main__':
    file_path = os.path.join(os.path.dirname(__file__), "data/ADT_GEKID_Test.xml")
    # print(process_file(file_path))
    # print(json.dumps(process_file(file_path), indent=2))
    print(process_xml_to_fhir_json(process_file(file_path)))
